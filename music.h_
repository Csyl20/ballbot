	// FrequencyTimer2::setPeriod(1000000);
	// FrequencyTimer2::setOnOverflow(togglePin5);
	// FrequencyTimer2::enable();
	// playTone(0, 523.25, 15, 100000);
	// playTone(0, 554.37, 15, 100000);
	// playTone(0, 587.33, 15, 100000);
	// playTone(0, 622.25, 15, 100000);
	// playTone(0, 659.25, 15, 100000);
	// playTone(0, 698.46, 15, 100000);
	// playTone(0, 739.99, 15, 100000);
	// playTone(0, 783.99, 15, 100000);
	// playTone(0, 830.61, 15, 100000);
	// playTone(0, 880.00, 15, 100000);
	// playTone(0, 932.33, 15, 100000);
	// playTone(0, 987.77, 15, 100000);
	// playTone(0, 1046.50, 15, 100000);
	// playTone(0, PWM_FREQ, 0, 0);

	// musicService.begin(musicServiceRoutine, MUS_SERVICE_INTERVAL);

#define MUS_SERVICE_INTERVAL 225000

#define T_S    0

#define T_C3   130.81
#define T_C3S  138.59
#define T_D3   146.83
#define T_D3S  155.56
#define T_E3   164.81
#define T_F3   174.61
#define T_F3S  185.00
#define T_G3   196.00
#define T_G3S  207.65
#define T_A3   220.00
#define T_A3S  233.08
#define T_B3   246.94
#define T_C4   261.63
#define T_C4S  277.18
#define T_D4   293.66
#define T_D4S  311.13
#define T_E4   329.63
#define T_F4   349.23
#define T_F4S  369.99
#define T_G4   392.00
#define T_G4S  415.30
#define T_A4   440.00
#define T_A4S  466.16
#define T_B4   493.88
#define T_C5   523.25
#define T_C5S  554.37
#define T_D5   587.33
#define T_D5S  622.25
#define T_E5   659.25
#define T_F5   698.46
#define T_F5S  739.99
#define T_G5   783.99
#define T_G5S  830.61
#define T_A5   880.00
#define T_A5S  932.33
#define T_B5   987.77
#define T_C6   1046.50
#define T_C6S  1108.73
#define T_D6   1174.66
#define T_D6S  1244.51
#define T_E6   1318.51
#define T_F6   1396.91
#define T_F6S  1479.98
#define T_G6   1567.98
#define T_G6S  1661.22
#define T_A6   1760.00
#define T_A6S  1864.66
#define T_B6   1975.53

bool pin5State = false;
int pin5Count = 0;
uint8_t pin5Volume = 0;

IntervalTimer musicService;
unsigned long musicServiceBeats = 0;

int player1Wait = 0;
int player2Wait = 0;
int player3Wait = 0;

int player1Index = -1;
int player2Index = -1;
int player3Index = -1;

float player1[][2] = {
	{T_F5S, 8}, 
	{T_E5, 8}, 
	{T_D5, 8}, 
	{T_C5S, 8}, 
	{T_B4, 8}, 
	{T_A4, 8}, 
	{T_B4, 8}, 
	{T_C5S, 8}, 
	{T_D6, 8}, 
	{T_C6S, 8}, 
	{T_B5, 8}, 
	{T_A5, 8}, 
	{T_G5, 8}, 
	{T_F5S, 8}, 
	{T_G5, 8}, 
	{T_A5, 8}, 
	{T_D6, 8}, 
	{T_C6S, 8}, 
	{T_B5, 8}, 
	{T_A5, 8}, 
	{T_G5, 8}, 
	{T_F5S, 8}, 
	{T_G5, 8}, 
	{T_A5, 8}, 
	{T_F4S, 4}, 
	{T_D4, 4}, 
	{T_A4, 4}, 
	{T_G4, 4}, 
	{T_F4S, 4}, 
	{T_D4, 4}, 
	{T_F4S, 4}, 
	{T_E4, 4}, 
	{T_D4, 4}, 
	{T_B3, 4}, 
	{T_D4, 4}, 
	{T_A3, 4}, 
	{T_B3, 4}, 
	{T_D4, 4}, 
	{T_C4S, 4}, 
	{T_A3, 4}, 
	{T_D4, 2}, 
	{T_E4, 2}, 
	{T_F4S, 2}, 
	{T_G4, 2}, 
	{T_A4, 2}, 
	{T_E4, 2}, 
	{T_A4, 2}, 
	{T_G4, 2}, 
	{T_F4S, 2}, 
	{T_B4, 2}, 
	{T_A4, 2}, 
	{T_G4, 2}, 
	{T_A4, 2}, 
	{T_G4, 2}, 
	{T_F4S, 2}, 
	{T_E4, 2}, 
	{T_D4, 2}, 
	{T_B3, 2}, 
	{T_B4, 2}, 
	{T_C5S, 2}, 
	{T_D5, 2}, 
	{T_C5S, 2}, 
	{T_B4, 2}, 
	{T_A4, 2}, 
	{T_G4, 2}, 
	{T_F4S, 2}, 
	{T_E4, 2}, 
	{T_B4, 2}, 
	{T_A4, 2}, 
	{T_B4, 2}, 
	{T_A4, 2}, 
	{T_G4, 2}, 
	{T_F4S, 4}, 
	{T_D4, 4}, 
	{T_A3, 8}
};

float player2[][2] = {
	{T_D5, 8},
	{T_C5, 8},
	{T_B4, 8},
	{T_A4, 8},
	{T_G4, 8},
	{T_F4, 8},
	{T_G4, 8},
	{T_A4, 8},
	{T_F5, 8},
	{T_A5, 8},
	{T_D5, 8},
	{T_F5, 8},
	{T_B4, 8},
	{T_D5, 8},
	{T_B4, 8},
	{T_C5, 8},
	{T_F5, 8},
	{T_E5, 8},
	{T_D5, 8},
	{T_C5, 8},
	{T_B4, 8},
	{T_A4, 8},
	{T_B4, 8},
	{T_C5, 8},
	{T_S , 112},
	{T_E5, 8},
	{T_A5, 8},
	{T_A6, 2},
	{T_F6, 1},
	{T_G6, 1},
	{T_A6, 2},
	{T_F6, 1},
	{T_G6, 1},
	{T_A6, 1},
	{T_A5, 1},
	{T_B5, 1},
	{T_C6, 1},
	{T_D6, 1},
	{T_E6, 1},
	{T_F6, 1},
	{T_G6, 1}
};

float player3[][2] = {
	{T_D4, 8},
	{T_A3, 8},
	{T_B3, 8},
	{T_F3S, 8},
	{T_G3, 8},
	{T_D3, 8},
	{T_G3, 8},
	{T_A3, 8},
	{T_D4, 4},
	{T_F4S, 4},
	{T_A4, 4},
	{T_G4, 4},
	{T_F4S, 4},
	{T_D4, 4},
	{T_F4S, 4},
	{T_E4, 4},
	{T_D4, 4},
	{T_B3, 4},
	{T_D4, 4},
	{T_A3, 4},
	{T_G3, 4},
	{T_B3, 4},
	{T_C4S, 4},
	{T_A3, 4},
	{T_D4, 2},
	{T_D4, 2},
	{T_F4S, 2},
	{T_A4, 4},
	{T_A3, 2},
	{T_E4, 2},
	{T_A3, 4},
	{T_B3, 2},
	{T_D4, 2},
	{T_F4S, 4},
	{T_F3S, 2},
	{T_C4S, 2},
	{T_F4S, 4},
	{T_G3, 2},
	{T_B3, 2},
	{T_D4, 4},
	{T_D3, 2},
	{T_A3, 2},
	{T_D4, 4},
	{T_G3, 2},
	{T_B3, 2},
	{T_D4, 2},
	{T_E4, 2},
	{T_A3, 2},
	{T_C4S, 2},
	{T_E4, 2},
	{T_D6, 2},
	{T_C6S, 2},
	{T_D6, 2},
	{T_D5, 2},
	{T_C5S, 2},
	{T_A5, 2},
	{T_E5, 2},
	{T_F5S, 2},
	{T_D5, 2},
	{T_D6, 2},
	{T_C6S, 2},
	{T_B5, 2},
	{T_C6S, 2},
	{T_F6S, 2},
	{T_A6, 2},
	{T_B6, 2},
	{T_G6, 2},
	{T_F6S, 2},
	{T_E6, 2},
	{T_G6, 2},
	{T_F6S, 2},
	{T_E6, 2},
	{T_D6, 2},
	{T_C6S, 2},
	{T_B5, 2},
	{T_A5, 2},
	{T_G5, 2},
	{T_F5S, 2},
	{T_E5, 2},
	{T_G5, 2},
	{T_F5S, 2},
	{T_E5, 2},
	{T_D5, 4},
	{T_D6, 4},
	{T_A5, 4},
	{T_C6S, 4},
	{T_F5S, 4},
	{T_B5, 4},
	{T_E5, 4},
	{T_A5, 4},
	{T_B4, 4},
	{T_G5, 4},
	{T_F5S, 4},
	{T_A5, 4},
	{T_S, 4},
	{T_D6, 8},
	{T_C6S, 4},
	{T_S, 16}
};

void togglePin5(){
	// pin5State = !pin5State;
	// if (pin5State){
	// 	digitalWriteFast(5, LOW);
	// }
	// else{
	// 	digitalWriteFast(5, HIGH);
	// }
	if (pin5Count < 1){
		digitalWriteFast(5, HIGH);
		pin5Count++;
	}
	else if (pin5Count < 255){
		digitalWriteFast(5, LOW);
		pin5Count++;
	}
	else{
		digitalWriteFast(5, LOW);
		pin5Count = 0;
	}
	
}

void playTone(uint8_t player, float freq, uint8_t volume, long duration){
	uint8_t pwm, dir, brk;
	if (player == 0){
		pwm = MT_A_PWM;
		dir = MT_A_DIR;
		brk = MT_A_BRK;

		if (freq == 0){
			FrequencyTimer2::disable();
		}
		else{
			int period = (int)(1000000/freq);
			pin5Count = 0;
			pin5Volume = volume;
			FrequencyTimer2::setPeriod(period);

	  		//FrequencyTimer2::enable();
	  		//FrequencyTimer2::setOnOverflow(togglePin5);
		}		
	}
	else if (player == 1){
		pwm = MT_B_PWM;
		dir = MT_B_DIR;
		brk = MT_B_BRK;

		analogWriteFrequency(pwm, freq);
		analogWrite(pwm, volume);
	}
	else if (player == 2){
		pwm = MT_C_PWM;
		dir = MT_C_DIR;
		brk = MT_C_BRK;

		analogWriteFrequency(pwm, freq);
		analogWrite(pwm, volume);
	}

	
	digitalWriteFast(dir, HIGH);
	digitalWriteFast(brk, LOW);
	
	delayMicroseconds(duration);
}

void playTone(uint8_t player, float freq, uint8_t volume){
	playTone(player, freq, volume, 0);
}

void musicServiceRoutine(){
	if (player1Wait == 0){
		player1Index++;
		if (player1Index < sizeof(player1)/sizeof(player1[0])){
			playTone(0, player1[player1Index][0], 15, 0);
			Serial.print("1 ");
			Serial.println(player1[player1Index][0]);
		}
		player1Wait = player1[player1Index][1];
	}

	if (player2Wait == 0){
		player2Index++;
		if (player2Index < sizeof(player2)/sizeof(player2[0])){
			playTone(1, player2[player2Index][0], 15, 0);
			Serial.print("2 ");
			Serial.println(player2[player2Index][0]);
		}
		player2Wait = player2[player2Index][1];
	}

	if (player3Wait == 0){
		player3Index++;
		if (player3Index < sizeof(player3)/sizeof(player3[0])){
			
			Serial.print("3 ");
			Serial.println(player3[player3Index][0]);
		}
		player3Wait = player3[player3Index][1];
	}

	musicServiceBeats++;
	player1Wait--;
	player2Wait--;
	player3Wait--;
}
